// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    
    // We now need 8*RAM8, so the 3 most significant bits(5,4,3) of address will point to a given RAM8
    // and the 3 least signficant bits(2,1,0) will be the address of a register within that RAM8
    DMux8Way(in=load, a=l1, b=l2, c=l3, d=l4, e=l5, f=l6, g=l7, h=l8, sel=address[3..5]);

    RAM8(in=in, load=l1, address=address[0..2], out=a);
    RAM8(in=in, load=l2, address=address[0..2], out=b);
    RAM8(in=in, load=l3, address=address[0..2], out=c);
    RAM8(in=in, load=l4, address=address[0..2], out=d);
    RAM8(in=in, load=l5, address=address[0..2], out=e);
    RAM8(in=in, load=l6, address=address[0..2], out=f);
    RAM8(in=in, load=l7, address=address[0..2], out=g);
    RAM8(in=in, load=l8, address=address[0..2], out=h);

    // Use Mux to read from the proper ROM8 fro the address
    Mux8Way16(a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h, sel=address[3..5], out=out);
}